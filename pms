#!/usr/bin/python

"""
pms.

https://github.com/np1/pms

Copyright (C)  2013 nagev

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""

from __future__ import print_function

__version__ = "0.17"
__author__ = "nagev"
__license__ = "GPLv3"

import subprocess
import logging
import time
import json
import sys
import re
import os

# Python 3 compatibility hack

if sys.version_info[:2] >= (3, 0):
    # pylint: disable=E0611,F0401
    from urllib.request import build_opener
    from urllib.error import HTTPError, URLError
    py2utf = lambda x: x
    py2utf8_decode = lambda x: x
    compat_input = input

else:
    from urllib2 import build_opener, HTTPError, URLError
    py2utf = lambda x: x.encode("utf8")
    py2utf8_decode = lambda x: x.decode("utf8")
    compat_input = raw_input

#logging.basicConfig(level=logging.DEBUG)

PLAYER = "mplayer"
PLAYERARGS = "-nolirc -nocache -prefer-ipv4 -really-quiet"
COLOURS = True
P = {}
P['pmode'] = False

try:
    # pylint: disable=E0611
    from gi.repository import GLib
    DDIR = GLib.get_user_special_dir(GLib.USER_DIRECTORY_DOWNLOAD)
    DDIR = py2utf8_decode(DDIR)

except (ImportError, AttributeError):
    DDIR = os.path.join(os.path.expanduser("~"), "Downloads")

DDIR = os.path.join(DDIR, "PMS")

if os.name == "nt":  # Disable colours for Windows
    COLOURS = False

else:

    try:
        import readline  # import readline if not running on windows
        readline.get_history_length()  # redundant, prevents unused import warn

    except ImportError:
        pass  # no biggie

opener = build_opener()
opener.addheaders = [("User-Agent", "Mozilla/5.0 (compatible; MSIE 9.0; "
                      "Windows NT 6.1; WOW64; Trident/5.0)")]
urlopen = opener.open


class c(object):

    """ Class for holding colour code values. """

    white = "\x1b[0m"
    red, green, yellow, blue, pink = ["\x1b[%sm" % n for n in range(91, 96)]
    hh = "\x1b[%sm" * 3 % (2, 4, 33)

    if not COLOURS:
        hh = red = green = yellow = blue = pink = white = ""

    r, g, y, b, p, w = red, green, yellow, blue, pink, white
    blank = white + "\n" * 200


EXITMSG = c.blank + """\n
{0}pms - {1}http://github.com/np1/pms{0}
Released under the GPLv3 license
(c) 2013 nagev{2}\n""".format(c.r, c.b, c.w)

#  Help text

HELP_GENERAL = """\
\t{2}Searching{1}
\tEnter an artist and/or song title to search or alternatively you
\tcan enter one of the following:\n
\t\t{0}\\top{1} for top tracks this week
\t\t{0}\\top3m{1} for top tracks of the last 3 months
\t\t{0}\\top6m{1} for top tracks of the last 6 months
\t\t{0}\\topyear{1} for top tracks of the last year
\t\t{0}\\topall{1} for all time top tracks\n
\t\t{0}\\list <playlist_url>{1} to load a playlist\n""".format(c.g, c.w, c.hh)

HELP_SEARCH = """\
\t{2}Searching{1}
\tEnter an artist name and/or song title to search""".format(c.g, c.w, c.hh)

HELP_TRACK_SELECT = """\
\t{2}Playback{1}
\tEnter a track number to play a single track or {0}all{1} to play all
\tdisplayed tracks. Enter {0}n,n{1} and {0}n-n{1} to play multiple tracks
\teg: {0}5,7,1-3{1} will play tracks 5, 7, 1, 2 and 3\
""".format(c.g, c.w, c.hh)

HELP_DOWNLOAD = """\
\t{2}Download{1}
\tEnter {0}d{1}<{0}N{1}> to download a track.  eg: {0}d4{1}\
""".format(c.g, c.w, c.hh)

HELP_PLAYLIST_ADD = """\
\t{2}Add To Playlist{1}
\tEnter a track number to add to the playlist or {0}all{1} to add all
\tdisplayed tracks. Enter {0}n,n{1} and {0}n-n{1} to add multiple tracks
\teg: {0}5,7,1-3{1} will add tracks 5, 7, 1, 2 and 3\
""".format(c.g, c.w, c.hh)

HELP_PLAYLIST_VEDIT = """\
\t{2}View / Edit Playlist{1}
\tEnter {0}\\vp{1} to view the playlist.\
""".format(c.g, c.w, c.hh)

HELP_PLAYLIST_LOAD_SAVE = """\
\t{0}Save / Load a Playlist{1}
\tSaving / Loading of playlists is currently being implemented and will be
\tavailable very soon.  Check the README file on GitHub for new features\
""".format(c.hh, c.w)

HELP_PLAYLIST_MANIPULATE = """\
\t{2}Manipulate Playlist{1}
\tTo remove tracks: {0}rm n{1} or {0}rm n,n,..{1} or {0}rm n-n{1} for a range.
\tTo switch two tracks: {0}sw n n{1} or {0}switch n,n{1}
\tTo move track n to position k: {0}mv n k{1} or {0}mv n,k{1}\
""".format(c.g, c.w, c.hh)

HELP_PLAYLIST_TOGGLE = """\
\t{2}Toggle Playlist Mode{1}
\tEnter {0}p{1} to toggle playlist mode.  When active, any tracks chosen are
\tadded to the playlist instead of being played.  Press {0}h{1} for more help
\twhen you are in playlist mode.\
""".format(c.g, c.w, c.hh)

HELP_PLAYLIST_PLAY = """\
\t{2}Playing a Playlist{1}
\tTo play a playlist, view it ({0}\\vp{1}) and enter {0}all{1} or the track \
numbers
\tyou wish to play.  Ensure playlist mode is disabled when selecting tracks for
\tplayback (toggle with {0}p{1})\
""".format(c.g, c.w, c.hh)


def mplayer_help(short=True):
    """ Mplayer help.  """

    seek = "[{0}<-{1}] seek [{0}->{1}]"
    volume = "[{0}9{1}] volume [{0}0{1}]"
    volume = volume if short else volume + "      [{0}ctrl-c{1}] return"
    pause = "[{0}DN{1}] SEEK [{0}UP{1}]       [{0}space{1}] pause"
    ret = "[{0}q{1}] %s" % ("return" if short else "next track")
    fmt = "    %-20s       %-20s"
    lines = fmt % (seek, volume) + "\n" + fmt % (pause, ret)
    return lines.format(c.g, c.w)


def tidy(raw, field):
    """ Tidy HTML entities, format songlength if field is duration.  """

    if field == "duration":
        raw = time.strftime('%M:%S', time.gmtime(int(raw)))

    else:

        for r in (("&#039;", "'"), ("&amp;#039;", "'"), ("&amp;amp;", "&"),
                 ("  ", " "), ("&amp;", "&"), ("&quot;", '"')):
            raw = raw.replace(r[0], r[1])

    return raw


def get_average_bitrate(song):
    """ calculate average bitrate of VBR tracks. """

    if song["rate"] == "VBR":
        vbrsize = float(song["Rsize"][:-3]) * 10000
        vbrlen = float(song["Rduration"])
        vbrabr = str(int(vbrsize / vbrlen))
        song["listrate"] = vbrabr + " v"  # for display in list
        song["rate"] = vbrabr + " Kb/s VBR"  # for playback display

    else:
        song["listrate"] = song["rate"][:3]  # not vbr list display

    return song


def get_tracks_from_page(page):
    """ Get search results from web page. """

    fields = "duration file_id singer song link rate size source".split()
    matches = re.findall(r"\<li.(duration[^>]+)\>", page)
    songs = []

    if matches:

        for song in matches:
            cursong = {}

            for f in fields:
                v = re.search(r'%s=\"([^"]+)"' % f, song)

                if v:
                    cursong[f] = tidy(v.group(1), f)
                    cursong["R" + f] = v.group(1)

                else:
                    raise Exception("problem with field " + f)

            cursong = get_average_bitrate(cursong)
            songs.append(cursong)

    else:
        logging.debug("got unexpected webpage or no search results")
        return False

    return songs


def generate_choices(songs):
    """ Generate list of choices from a song list."""

    fmtrow = "%s%-6s %-7s %-21s %-22s %-8s %-8s%s\n"
    head = (c.hh, "Item", "Size", "Artist", "Track", "Length", "Bitrate", c.w)
    out = "\n" + fmtrow % head

    for n, x in enumerate(songs):
        col = c.r if n % 2 == 0 else c.p
        size = x.get('size') or 0
        title = x.get('song') or "unknown title"
        artist = x.get('singer') or "unknown artist"
        duration = x.get('duration') or "unknown length"
        bitrate = x.get('listrate') or "unknown"
        out += (fmtrow % (col, str(n + 1), str(size)[:3] + " Mb", artist[:20],
                title[:21], duration[:8], bitrate[:6], c.w))

    return out + "\n" * (20 - len(songs))


def get_stream(song):
    """ Return the url for a song. """

    if not "track_url" in song:
        url = 'http://pleer.com/site_api/files/get_url?action=download&id=%s'
        url = url % song['link']

        try:
            logging.debug("[0] fetching " + url)
            wdata = urlopen(url, timeout=7).read().decode("utf8")
            logging.debug("fetched " + url)

        except HTTPError:
            time.sleep(2)  # try again
            logging.debug("[1] fetching 2nd attempt ")
            wdata = urlopen(url, timeout=7).read().decode("utf8")
            logging.debug("fetched 2nd attempt" + url)

        j = json.loads(wdata)
        track_url = j['track_link']
        return track_url

    else:
        return song['track_url']


def playsong(song):
    """ Play song using PLAYER called with args PLAYERARGS."""

    try:
        track_url = get_stream(song)
        song['track_url'] = track_url

    except (URLError, HTTPError) as e:
        print("\nProblem fetching this track: " + c.r + str(e) + c.w)
        time.sleep(3)
        print(c.blank)
        return

    try:
        logging.debug("getting content-length header for " + track_url)
        assert opener.open(track_url, timeout=5).headers['content-length']
        logging.debug("got CL header")

    except IOError:
        print("\nSorry, this track no longer exists!")
        time.sleep(3)
        return

    try:
        cmd = [PLAYER] + PLAYERARGS.split() + [song['track_url']]
        logging.debug("starting mplayer with " + song['track_url'])
        subprocess.call(cmd)
        print(c.blank)

    except OSError:
        print("{}{}{} not found on this system".format(c.y, PLAYER, c.w))
        time.sleep(2)


def get_top_period(period):
    """ Get top music for period, returns songs list."""

    url = ("http://pleer.com/en/gettopperiod?target1=%s&target2=r1&select=e&"
           "page_ru=1&page_en=%s")
    url = url % ("e%s" % period, 1)
    tps = "past week,past 3 months,past 6 months,past year,all time".split(",")
    print(c.blank)
    print("%sTop tracks for %s...%s" % (c.y, tps[period - 1], c.w))
    logging.debug("[2] fetching " + url)

    try:
        wdata = urlopen(url).read().decode("utf8")

    except (URLError, HTTPError) as e:
        print("Error fetching data: " + "{}{}{}".format(c.r, e, c.w))
        time.sleep(2)
        return None

    logging.debug("fetched " + url)
    match = re.search(r"<ol id=\"search-results\">[\w\W]+?<\/ol>", wdata)
    html_ol = match.group(0)
    songs = get_tracks_from_page(html_ol)
    return songs


def dosearch(term):
    """ Perform search or fetch playlist, returns songs list."""

    if not term or len(term) < 2:
        logging.debug("no search term")
        return False

    elif term.startswith("\\list"):
        playlist = re.search(r"(list(\w){8,13})", term)

        if not playlist:
            print("invalid playlist")
            return False

        else:
            url = "http://pleer.com/en/" + playlist.group(1)
            formatstr = (c.blank, c.y, url, c.w)
            print("%sImporting playlist from %s%s%s\n" % (formatstr))

    else:
        print(c.blank + "Searching for '%s%s%s'" % (c.y, term, c.w))
        url = "http://pleer.com/search?q=%s&target=tracks&page=%s"
        url = url % (term.replace(" ", "+"), 1)

    try:
        logging.debug("[3] fetching " + url)
        wdata = urlopen(url).read().decode("utf8")
        logging.debug("fetched" + url)
        songs = get_tracks_from_page(wdata)

    except (URLError, HTTPError) as e:
        print("Error fetching data from source: %s%s%s" % (c.r, str(e), c.w))
        time.sleep(2)
        logging.debug("HTTP Error fetching url:" + url)
        songs = None

    return songs


def download(song):
    """ Download file, shows status. """

    if not os.path.exists(DDIR):
        os.makedirs(DDIR)

    filename = song['singer'][:30] + " - " + song['song'][:30] + ".mp3"
    filename = os.path.join(DDIR, filename)
    print(c.blank + "Downloading %s%s%s ..\n" % (c.g, filename, c.w))
    status_string = ('  {0}{1:,}{2} Bytes [{0}{3:.2%}{2}] received. Rate: '
                     '[{0}{4:4.0f} kbps{2}].  ETA: [{0}{5:.0f} secs{2}]')
    song['track_url'] = get_stream(song)
    logging.debug("[4] fetching url " + song['track_url'])
    resp = urlopen(song['track_url'])
    logging.debug("fetched url " + song['track_url'])
    total = int(resp.info()['Content-Length'].strip())
    chunksize, bytesdone, t0 = 16384, 0, time.time()
    outfh = open(filename, 'wb')

    while True:
        chunk = resp.read(chunksize)
        outfh.write(chunk)
        elapsed = time.time() - t0
        bytesdone += len(chunk)
        rate = (bytesdone / 1024) / elapsed
        eta = (total - bytesdone) / (rate * 1024)
        stats = (c.y, bytesdone, c.w, bytesdone * 1.0 / total, rate, eta)

        if not chunk:
            outfh.close()
            break

        status = status_string.format(*stats)
        sys.stdout.write("\r" + status + ' ' * 4 + "\r")
        sys.stdout.flush()

    print("\nDone\n")


def _bi_range(seq):
    """
    Take a two-element seq, returns ascending or descending range.

    eg. [5,2] returns [5,4,3,2] and (2, 4) returns [2,3,4]

    """
    start, end = seq
    if start == end:
        return start, start
    elif end < start:
        return reversed(range(end, start + 1))
    else:
        return range(start, end + 1)


def _parse_multi(choice):
    """ Given a string such as 1,2,5-1 return [1,2,5,4,3,2,1]. """

    choice = choice.replace(" ", "")
    tracks = choice.split(",")
    alltracks = []
    for x in tracks:
        if "-" in x:
            nrange = x.split("-")
            startend = map(int, nrange)
            alltracks += _bi_range(startend)
        else:
            alltracks.append(int(x))
    return alltracks


def playlist_manipulate(r, choice):
    """Manipulate a playlist."""

    if not P.get("pl"):
        print(c.blank)
        print("No playlist created!  Add tracks in playlist mode")
        return (None, None)

    elif r['move'].match(choice):
        m = r['move'].match(choice)
        playlist, a, b = P["pl"], int(m.group(1)) - 1, int(m.group(2)) - 1
        playlist.insert(b, playlist.pop(a))
        print(c.blank)
        print("Moved %s to position %s" % (P['pl'][b]['song'], m.group(2)))
        return None, None

    elif r['swap'].match(choice):
        m = r['swap'].match(choice)
        playlist, a, b = P["pl"], int(m.group(1)) - 1, int(m.group(2)) - 1
        playlist[a], playlist[b] = playlist[b], playlist[a]
        print(c.blank)
        print("Switched tracks %s and %s" % (m.group(1), m.group(2)))
        return(None, None)

    elif r['remove'].match(choice):
        selection = _parse_multi(choice.strip().lstrip("rm").strip())
        selection = list(reversed(list(set(selection))))

        for x in selection:
            P['pl'].pop(x - 1)

        print(c.blank)
        print("%s tracks removed" % len(selection))
        return(None, None)


def get_input(songs):
    """ Prompt for user input, return action/value pair. """

    pr = c.r + "PL-Mode " + c.w if P['pmode'] else ""
    txt = "Enter selection or [{0}h{1}]elp or [{0}q{1}]uit\n {3}{2}> {1}"
    txt = txt.format(c.g, c.w, c.y, pr)
    r = {'nil': r'\s*$',
         'play': r'\s*\d{1,3}\s*(?:[,-]\s*\d{1,3}\s*){0,30}$',
         'all': r'\s*all\s*$',
         'dl': r'\s*(?:d|dl|download|down)(?:\s)*(\d{1,3})'}
    r['remove'] = r'\s*rm\s*(%s)' % r['play']
    r['swap'] = r'\s*(?:swap|sw)\s*(\d{1,3})\s*(?:\s+|\,)\s*(\d{1,3})\s*'
    r['move'] = r'\s*(?:move|mv)\s*(\d{1,3})\s*(?:\s+|\,)\s*(\d{1,3})\s*'

    try:
        choice = compat_input(txt)

    except KeyboardInterrupt:
        sys.exit(EXITMSG)

    r = {a: re.compile(k, re.IGNORECASE) for a, k in r.items()}

    if r['nil'].match(choice):
        raise IOError

    elif r['swap'].match(choice) or r['remove'].match(choice) or \
            r['move'].match(choice):
        retval = playlist_manipulate(r, choice)

    elif r['play'].match(choice):
        selection = _parse_multi(choice)
        retval = ("select", [songs[x - 1] for x in selection])

    elif r['dl'].match(choice):
        songnum = int(r['dl'].match(choice).group(1))
        retval = ("download", songs[songnum - 1])

    elif r['all'].match(choice):
        retval = ("select", songs)

    else:
        retval = ("search", choice)

    return retval


def playback_progress(idx, cursong, allsongs):
    """ Generate string to show selected tracks, indicate current track. """

    out = "  %s%-31s  %-31s %s   %s\n" % (c.hh, "Artist", "Title", "Time", c.w)
    multi = len(allsongs) > 1

    for n, song in enumerate(allsongs):
        i = song['singer'][:30], song['song'][:30], song['duration']
        rate = song['rate']
        fmt = (c.w, "  ", c.b, i[0], c.w, c.b, i[1], c.w, c.y, i[2], c.w)

        if n == idx:
            fmt = (c.y, "> ", c.p, i[0], c.w, c.p, i[1], c.w, c.p, i[2], c.w)
            r, cur = rate, i

        out += "%s%s%s%-31s%s  %s%-31s%s [%s%s%s]\n" % fmt

    out = out if multi else ""
    out += "\n" * (3 - len(allsongs))
    pos = (8 * " ", c.y, idx + 1, c.w, c.y, len(allsongs), c.w)
    playing = "{}{}{}{} of {}{}{}\n\n".format(*pos) if multi else "\n\n"
    keys = mplayer_help(short=not multi)

    if PLAYER == "mplayer":
        out += "\n" + keys

    fmt = (playing, c.r, c.w, c.r, c.w, r)
    out += ("{}    {}%s{} by {}%s{} [{}]" % (cur[1], cur[0])).format(*fmt)
    return out


def playlist_display():
    """ Show songs in playlist. """

    pl_out = ""

    for n, psong in enumerate(P['pl']):
        pl_out += "%0s. %s\n" % (n, psong['song'])

    return pl_out


def songaction(action, value):
    """ Play, Download or Add the songs specified in `value`. """

    if action == "download":
        download(value)

    elif action == "select":
        print(c.blank)

        if P['pmode']:
            P['pl'] = value if not P.get("pl") else P['pl'] + value
            view = "[{0}\\vp{1} to view]".format(c.g, c.w)
            data = "\t\t", len(value), len(P['pl']), view
            print("%s%s added to playlist (total %s) %s" % data)
            #print(py2utf(playlist_display()))

        else:

            #  Play songs, show progress

            for n, song in enumerate(value):
                print(py2utf(playback_progress(n, song, value)))

                try:
                    playsong(song)

                except KeyboardInterrupt:
                    print(c.white)
                    print(c.blank)
                    break

                except AssertionError:
                    print(c.blank)
                    print("Unable to fetch track")
                    time.sleep(2)


def select_song(songs, message=None):
    """ Show song list and message if present.

    Get user input, call songaction() to perform play / download or return new
    search query text

    """

    print(py2utf(generate_choices(songs)))

    if message:
        print(message)

    try:
        action, value = get_input(songs)

    except IOError:
        print(c.blank)
        return ("Error", "Nothing")

    except IndexError as e:
        print(c.blank)
        return ("Error", e)

    if action == "search":
        return ("search", value)

    songaction(action, value)
    return (None, None)


def get_songs(args="", songs=None):
    """ Return list of songs based on the search term, or None. """

    tops = "\\top \\top3m \\top6m \\topyear \\topall".split()
    args = args.strip()

    if not args:
        return None

    # return top songs

    elif args in tops:
        return get_top_period(tops.index(args) + 1)

    # show help

    elif args in ("\\h", "h"):
        show_help(bool(songs))
        return songs

    # toggle playlist mode
    elif args in ("\\p", "p"):
        P['pmode'] = not P['pmode']
        print(c.blank)
        return songs

    elif args in ("\\vp") and P.get("pl"):
        songs = P['pl']
        print(c.blank)
        return songs

    elif args in ("\\vp") and not P.get("pl"):
        print(c.blank)
        o = (c.blank, c.g, c.w)
        txt = "{0}Playlist is empty! Enter {1}h{2} for help about playlists"
        print(txt.format(*o))
        return songs

    # quit option

    elif args in ("\\q", "q", "quit", "exit"):
        sys.exit(EXITMSG)

    # have args, do search
    else:
        songs = dosearch(args)
        if not songs:
            print(c.blank)
            print("Sorry, nothing matched %s%s%s" % (c.g, args, c.w))
            return None
        else:
            return songs


def show_help(songs=None):
    """  Show context-sensitive help. """

    print(c.blank)
    print("  {}Available choices:{}\n".format(c.hh, c.w))

    if songs and not P['pmode']:
        print("{}\n\n{}\n\n{}\n\n{}\n".format(HELP_TRACK_SELECT,
                                              HELP_DOWNLOAD,
                                              HELP_SEARCH,
                                              HELP_PLAYLIST_TOGGLE))

    elif songs and P['pmode']:
        nl = ("{}\n\n" * 5) + "{}\n"
        print(nl.format(HELP_SEARCH,
                        HELP_PLAYLIST_ADD,
                        HELP_PLAYLIST_VEDIT,
                        HELP_PLAYLIST_PLAY,
                        HELP_PLAYLIST_MANIPULATE,
                        HELP_PLAYLIST_LOAD_SAVE))

    else:
        print(HELP_GENERAL)

    try:
        compat_input("Press {}Enter{} to continue".format(c.g, c.w))

    except KeyboardInterrupt:
        pass

    print(c.blank)


def main():
    """loop forever, branch depending on whether search results are held."""

    action = message = None
    songlist = get_songs(" ".join(sys.argv[1:]))

    while True:

        if not songlist:
            pr = "{0}PL-Mode {1}".format(c.r, c.w) if P['pmode'] else ""
            prompt = ("\nEnter artist and/or song name or {0}h{1} for help "
                      "or {0}q{1} to quit:\n {3}{2}> {1}")

            try:
                inp = compat_input(prompt.format(c.g, c.w, c.y, pr))

            except KeyboardInterrupt:
                sys.exit(EXITMSG)

            songlist = get_songs(inp)

        else:
            action, value = select_song(songlist, message)
            message = None
            if action == "Error":
                message = "Invalid entry: " + str(value)
            elif action == "search":
                songlist = get_songs(value, songlist)


if __name__ == "__main__":
    main()
