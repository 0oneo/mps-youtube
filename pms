#!/usr/bin/python

"""
pms.

https://github.com/np1/pms

Copyright (C)  2013 nagev

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""

from __future__ import print_function

__version__ = "0.18.17"
__author__ = "nagev"
__license__ = "GPLv3"

import subprocess
import logging
import random
import socket
import time
import json
import sys
import re
import os

# disable too many local variables pylint warning
# pylint: disable=R0914
# disable too many lines in module pylint warning
# pylint: disable=C0302

# Python 3 compatibility hack

if sys.version_info[:2] >= (3, 0):
    # pylint: disable=E0611,F0401
    import pickle
    from urllib.request import build_opener
    from urllib.error import HTTPError, URLError
    py2utf = lambda x: x
    py2utf8_decode = lambda x: x
    compat_input = input

else:
    from urllib2 import build_opener, HTTPError, URLError
    import cPickle as pickle
    py2utf = lambda x: x.encode("utf8")
    py2utf8_decode = lambda x: x.decode("utf8")
    compat_input = raw_input

#logging.basicConfig(level=logging.DEBUG)

PLAYER = "mplayer"
PLAYERARGS = "-nolirc -nocache -prefer-ipv4 -really-quiet"
COLOURS = True


try:
    # pylint: disable=E0611
    from gi.repository import GLib
    DDIR = GLib.get_user_special_dir(GLib.USER_DIRECTORY_DOWNLOAD)
    DDIR = DDIR or os.path.join(os.path.expanduser("~"), "Downloads")
    DDIR = py2utf8_decode(DDIR)

except (AttributeError, ImportError):
    DDIR = os.path.join(os.path.expanduser("~"), "Downloads")

DDIR = os.path.join(DDIR, "PMS")
PLFILE = os.path.join(os.path.expanduser("~"), ".pms-playlist")

if os.name == "nt":  # Disable colours for Windows
    COLOURS = False

else:
    try:
        import readline  # import readline if not running on windows
        readline.get_history_length()  # redundant, prevents unused import warn

    except ImportError:
        pass  # no biggie

opener = build_opener()
opener.addheaders = [("User-Agent", "Mozilla/5.0 (compatible; MSIE 9.0; "
                      "Windows NT 6.1; WOW64; Trident/5.0)")]
urlopen = opener.open


class c(object):

    """ Class for holding colour code values. """

    white = "\x1b[0m"
    red, green, yellow, blue, pink = ["\x1b[%sm" % n for n in range(91, 96)]
    hh = "\x1b[%sm" * 3 % (2, 4, 33)

    if not COLOURS:
        hh = red = green = yellow = blue = pink = white = ""

    r, g, y, b, p, w = red, green, yellow, blue, pink, white


class Playlist(object):

    """ Representation of a playist, has list of songs. """

    def __init__(self, name=None, songs=None):
        self.name = name
        self.creation = time.time()
        self.songs = songs or []

    @property
    def is_empty(self):
        """ Return True / False if songs are populated or not. """

        return bool(not self.songs)

    @property
    def size(self):
        """ Return number of tracks. """

        return len(self.songs)

    @property
    def duration(self):
        """ Sum duration of the playlist. """

        duration = 0

        for song in self.songs:
            duration += int(song['Rduration'])

        duration = time.strftime('%H:%M:%S', time.gmtime(int(duration)))
        return duration


class g(object):

    """ Class for holding globals that are needed throught the module. """

    model = Playlist(name="model")
    active = Playlist(name="active")
    noblank = False
    text = {}
    userpl = None
    message = content = ""

HELP = """
{0}Searching{1}
You can enter an artist/song name to search whenever the program is expecting
text input. Searches must be prefixed with a {2}.{1} character.

When a list of songs is displayed, you can use the following commands:

{0}Downloading{1}
{2}d 3{1} to download song 3

{0}Selecting Songs{1}
{2}all{1} to play all
{2}1,2,3{1} to play songs 1 2 and 3
{2}2-4,6,6-3{1} to play songs 2, 3, 4, 6, 6, 5, 4, 3

Note:The commands {2}shuffle{1} and {2}repeat{1} can be inserted at the start \
or end of
any of the above to enable those modes: eg, {2}shuffle 1,2,3{1} and \
{2}repeat 2-4, 1`{1}

{0}Manipulating Songs{1}
{2}rm 1,3{1} to remove songs 1 and 3.  Also use rm 1,2,5-7 to remove a range
{2}rm all{1} to remove all songs
{2}sw 1,3{1} to swap the position of songs 1 and 3
{2}mv 1,3{1} to move song 1 to postion 3

{0}Playlist commands{1}
{2}add 1,2,3{1} to add songs 1,2 and 3 to the current playlist.  To add a \
range,
 `add 1,2,5-7{1} can be entered

{2}add 1,2,3 playlist_name{1} to add songs 1,2,3 to a saved playlist.  A new
playlist will be created if it doesn't already exist.

{2}ls{1} to list your saved playlists
{2}open <playlist_name>{1} to open a saved playlist as the current playlist
{2}view <playlist name>{1} to view a playlist (leaves current playlist intact)
{2}vp{1} to view the current playlist (then use rm, mv and sw to modify it)
{2}save <playlist_name>{1} to save the currently displayed songs as a stored
    playlist on disk

{2}rm <playlist_name>{1}to delete a playlist from disk
You can load a playlist when invoking pms using the following command:

    `pms open <playlistname>`

{2}q{1} to quit
{2}h{1} for help
""".format(c.hh, c.w, c.g)


def F(key, nb=0, na=0, percent="*", nums="**", textlib=None):
    """Format text.

    nb, na indicate newlines before and after to return
    percent is the delimter for %s
    nums is the delimiter for the str.format command (**1 will become {1})
    textlib is the dictionary to use (defaults to P["text"] if not given)

    """

    textlib = textlib or g.text

    assert key in textlib
    text = textlib[key]
    percent_fmt = textlib.get(key + "_")
    number_fmt = textlib.get("_" + key)

    if number_fmt:
        text = re.sub(r"(\*\*(\d))", "{\\2}", text)
        text = text.format(*number_fmt)

    if percent_fmt:
        text = re.sub(r"\*", r"%s", text)
        text = text % percent_fmt

    text = re.sub(r"&&", r"%s", text)

    return "\n" * nb + text + c.w + "\n" * na

g.text = {
    "exitmsg": """\
**0pms - **1http://github.com/np1/pms**0
Released under the GPLv3 license
(c) 2013 nagev**2\n""",
    "_exitmsg": (c.r, c.b, c.w),

    # Error / Warning messages

    'no playlists': "*No saved playlists found!*",
    'no playlists_': (c.r, c.w),
    'pl bad name': '*&&* is not valid a valid name. Ensure it starts with a '
    'letter or _',
    'pl bad name_': (c.r, c.w),
    'pl not found': 'Playlist *&&* unknown. Saved playlists are shown above',
    'pl not found_': (c.r, c.w),
    'pl not found advise ls': 'Playlist "*&&*" not found. Use *ls* to list',
    'pl not found advise ls_': (c.y, c.w, c.g, c.w),
    'pl empty': 'Playlist is empty!',
    'advise add': 'Use *add N* to add a track',
    'advise add_': (c.g, c.w),
    'advise search': 'Search for songs and then use *add* to add them',
    'advise search_': (c.g, c.w),
    'no data': 'Error fetching data. Perhaps http://pleer.com is down.\n*&&*',
    'no data_': (c.r, c.w),
    'use dot': 'Start your query with a *.* to perform a search',
    'use dot_': (c.g, c.w),

    # Info messages

    'pl saved': 'Playlist saved as *&&*.  Use *ls* to list playlists',
    'pl saved_': (c.y, c.w, c.g, c.w),
    'pl loaded': 'Loaded playlist *&&* as current playlist',
    'pl loaded_': (c.y, c.w),
    'pl viewed': 'Showing playlist *&&*',
    'pl viewed_': (c.y, c.w),
    'pl help': 'Enter *open <name or ID>* to load a playlist or *rm <name>* to'
    ' delete\nEnter *view <name or ID>* to view a playlist',
    'pl help_': (c.g, c.w, c.g, c.w, c.g, c.w),
    'added to pl': '*&&* tracks added (*&&* total [*&&*]). Use *vp* to view',
    'added to pl_': (c.y, c.w, c.y, c.w, c.y, c.w, c.g, c.w),
    'added to saved pl': '*&&* tracks added to *&&* (*&&* total [*&&*])',
    'added to saved pl_': (c.y, c.w, c.y, c.w, c.y, c.w, c.y, c.w),
    'song move': 'Moved *&&* to position *&&*',
    'song move_': (c.y, c.w, c.y, c.w),
    'song sw': ("Switched track *&&* with *&&*"),
    'song sw_': (c.y, c.w, c.y, c.w),
    'current pl': "This is the current playlist. Use *save <name>* to save it",
    'current pl_': (c.g, c.w),
    'songs rm': '*&&* tracks removed &&',
    'songs rm_': (c.y, c.w)
}


def save_to_file():
    """ Save playlists.  Called each time a playlist is saved or deleted. """

    f = open(PLFILE, "wb")
    pickle.dump(g.userpl, f, protocol=2)


def open_from_file():
    """ Open playlists. Called once on script invocation. """

    try:
        f = open(PLFILE, "rb")
        g.userpl = pickle.load(f)

    except IOError:
        g.userpl = {}
        save_to_file()


def logo(col=None):
    """ Return text logo. """

    col = col if col else random.choice((c.g, c.r, c.y, c.b, c.p, c.w))
    LOGO = col + """\
      8888888b.  888b     d888  .d8888b.
      888   Y88b 8888b   d8888 d88P  Y88b
      888    888 88888b.d88888 Y88b.
      888   d88P 888Y88888P888  "Y888b.
      8888888P"  888 Y888P 888     "Y88b.
      888        888  Y8P  888       "888
      888        888   "   888 Y88b  d88P
      888        888       888  "Y8888P"
      """ + c.w
    return LOGO


def playlists_display():
    """ Produce a list of all playlists. """

    if not g.userpl:
        g.message = F("no playlists")
        return logo(c.y) + "\n\n" if g.model.is_empty else \
            generate_songlist_display()

    maxname = max(len(a) for a in g.userpl)
    out = "      {0}Saved Playlists{1}\n".format(c.hh, c.w)
    start = "      "
    fmt = "%s%s%-3s %-" + str(maxname + 3) + "s%s %s%-7s%s %-5s%s"
    head = (start, c.b, "ID", "Name", c.b, c.b, "Count", c.b, "Duration", c.w)
    out += "\n" + fmt % head + "\n\n"

    for v, z in enumerate(sorted(g.userpl)):
        n, p = z, g.userpl[z]
        l = fmt % (start, c.g, v + 1, n, c.w, c.y, str(p.size), c.y,
                   p.duration, c.w) + "\n"
        out += l

    #out += F('pl help', 1)
    return out


def mplayer_help(short=True):
    """ Mplayer help.  """

    seek = "[{0}<-{1}] seek [{0}->{1}]"
    volume = "[{0}9{1}] volume [{0}0{1}]"
    volume = volume if short else volume + "      [{0}ctrl-c{1}] return"
    pause = "[{0}DN{1}] SEEK [{0}UP{1}]       [{0}space{1}] pause"
    ret = "[{0}q{1}] %s" % ("return" if short else "next track")
    fmt = "    %-20s       %-20s"
    lines = fmt % (seek, volume) + "\n" + fmt % (pause, ret)
    return lines.format(c.g, c.w)


def tidy(raw, field):
    """ Tidy HTML entities, format songlength if field is duration.  """

    if field == "duration":
        raw = time.strftime('%M:%S', time.gmtime(int(raw)))

    else:
        for r in (("&#039;", "'"), ("&amp;#039;", "'"), ("&amp;amp;", "&"),
                 ("  ", " "), ("&amp;", "&"), ("&quot;", '"')):
            raw = raw.replace(r[0], r[1])

    return raw


def get_average_bitrate(song):
    """ calculate average bitrate of VBR tracks. """

    if song["rate"] == "VBR":
        vbrsize = float(song["Rsize"][:-3]) * 10000
        vbrlen = float(song["Rduration"])
        vbrabr = str(int(vbrsize / vbrlen))
        song["listrate"] = vbrabr + " v"  # for display in list
        song["rate"] = vbrabr + " Kb/s VBR"  # for playback display

    else:
        song["listrate"] = song["rate"][:3]  # not vbr list display

    return song


def get_tracks_from_page(page):
    """ Get search results from web page. """

    fields = "duration file_id singer song link rate size source".split()
    matches = re.findall(r"\<li.(duration[^>]+)\>", page)
    songs = []

    if matches:

        for song in matches:
            cursong = {}

            for f in fields:
                v = re.search(r'%s=\"([^"]+)"' % f, song)

                if v:
                    cursong[f] = tidy(v.group(1), f)
                    cursong["R" + f] = v.group(1)

                else:
                    raise Exception("problem with field " + f)

            cursong = get_average_bitrate(cursong)
            songs.append(cursong)

    else:
        logging.debug("got unexpected webpage or no search results")
        return False

    return songs


def screen_update():
    """ Display content, show message, blank screen."""

    if not g.noblank:
        print("\n" * 200)

    if g.content:
        print(py2utf(g.content))

    if g.message:
        print(g.message)

    g.message = g.content = False
    g.noblank = False


def playback_progress(idx, cursong, allsongs, repeat=False):
    """ Generate string to show selected tracks, indicate current track. """

    out = "  %s%-31s  %-31s %s   %s\n" % (c.hh, "Artist", "Title", "Time", c.w)
    multi = len(allsongs) > 1

    for n, song in enumerate(allsongs):
        i = song['singer'][:30], song['song'][:30], song['duration']
        rate = song['rate']
        fmt = (c.w, "  ", c.b, i[0], c.w, c.b, i[1], c.w, c.y, i[2], c.w)

        if n == idx:
            fmt = (c.y, "> ", c.p, i[0], c.w, c.p, i[1], c.w, c.p, i[2], c.w)
            r, cur = rate, i

        out += "%s%s%s%-31s%s  %s%-31s%s [%s%s%s]\n" % fmt

    out = out if multi else logo(c.p)
    out += "\n" * (3 - len(allsongs))
    pos = (8 * " ", c.y, idx + 1, c.w, c.y, len(allsongs), c.w)
    playing = "{}{}{}{} of {}{}{}\n\n".format(*pos) if multi else "\n\n"
    keys = mplayer_help(short=(not multi and not repeat))

    if PLAYER == "mplayer":
        out += "\n" + keys

    fmt = (playing, c.r, c.w, c.r, c.w, r)
    out += ("{}    {}%s{} by {}%s{} [{}]" % (cur[1], cur[0])).format(*fmt)
    out += "    REPEAT MODE" if repeat else ""
    return out


def generate_songlist_display():
    """ Generate list of choices from a song list."""

    songs = g.model.songs or []

    if not songs:
        return logo(c.g) + "\n\n"

    fmtrow = "%s%-6s %-7s %-21s %-22s %-8s %-7s%s\n"
    head = (c.hh, "Item", "Size", "Artist", "Track", "Length", "Bitrate", c.w)
    out = "\n" + fmtrow % head

    for n, x in enumerate(songs):
        col = c.r if n % 2 == 0 else c.p
        size = x.get('size') or 0
        title = x.get('song') or "unknown title"
        artist = x.get('singer') or "unknown artist"
        bitrate = x.get('listrate') or "unknown"
        duration = x.get('duration') or "unknown length"
        out += (fmtrow % (col, str(n + 1), str(size)[:3] + " Mb", artist[:20],
                title[:21], duration[:8], bitrate[:6], c.w))

    return out + "\n" * (5 - len(songs))


def get_stream(song):
    """ Return the url for a song. """

    if not "track_url" in song:
        url = 'http://pleer.com/site_api/files/get_url?action=download&id=%s'
        url = url % song['link']

        try:
            logging.debug("[0] fetching " + url)
            wdata = urlopen(url, timeout=7).read().decode("utf8")
            logging.debug("fetched " + url)

        except (HTTPError, socket.timeout):
            time.sleep(2)  # try again
            logging.debug("[1] fetching 2nd attempt ")
            wdata = urlopen(url, timeout=7).read().decode("utf8")
            logging.debug("fetched 2nd attempt" + url)

        j = json.loads(wdata)
        track_url = j['track_link']
        return track_url

    else:
        return song['track_url']


def playsong(song):
    """ Play song using PLAYER called with args PLAYERARGS."""

    try:
        track_url = get_stream(song)
        song['track_url'] = track_url

    except (URLError, HTTPError) as e:
        print("\nProblem fetching this track: " + c.r + str(e) + c.w)
        time.sleep(3)
        return

    try:
        logging.debug("getting content-length header for " + track_url)
        assert opener.open(track_url, timeout=5).headers['content-length']
        logging.debug("got CL header")

    except IOError:
        print("\nSorry, this track no longer exists!")
        time.sleep(3)
        return

    try:
        cmd = [PLAYER] + PLAYERARGS.split() + [song['track_url']]
        logging.debug("starting mplayer with " + song['track_url'])
        subprocess.call(cmd)

    except OSError:
        print("{}{}{} not found on this system".format(c.y, PLAYER, c.w))
        time.sleep(2)


def get_top_period(period):
    """ Get top music for period, returns songs list."""

    url = ("http://pleer.com/en/gettopperiod?target1=%s&target2=r1&select=e&"
           "page_ru=1&page_en=%s")
    url = url % ("e%s" % period, 1)
    tps = "past week,past 3 months,past 6 months,past year,all time".split(",")
    msg = ("%sTop tracks for %s%s" % (c.y, tps[period - 1], c.w))
    g.message = msg
    logging.debug("[2] fetching " + url)

    try:
        wdata = urlopen(url).read().decode("utf8")

    except (URLError, HTTPError) as e:
        g.message = F('no data') % e
        g.content = logo(c.r)
        return

    logging.debug("fetched " + url)
    match = re.search(r"<ol id=\"search-results\">[\w\W]+?<\/ol>", wdata)
    html_ol = match.group(0)
    g.model.songs = get_tracks_from_page(html_ol)
    g.content = generate_songlist_display()


def dosearch(term):
    """ Perform search. """

    if not term or len(term) < 2:
        g.message = c.r + "Not enough input" + c.w
        g.content = generate_songlist_display()

    else:
        g.message = "Searching for '%s%s%s'" % (c.y, term, c.w)
        g.content = logo(c.b) + "\n\n"
        screen_update()
        url = "http://pleer.com/search?q=%s&target=tracks&page=%s"
        url = url % (term.replace(" ", "+"), 1)

        try:
            logging.debug("[3] fetching " + url)
            wdata = urlopen(url).read().decode("utf8")
            logging.debug("fetched" + url)
            songs = get_tracks_from_page(wdata)

            if songs:
                g.model.songs = songs
                g.message = "Search results for %s%s%s" % (c.y, term, c.w)

            else:
                g.message = "Found nothing for %s%s%s" % (c.y, term, c.w)

        except (URLError, HTTPError) as e:
            g.message = F('no data') % e
            g.content = logo(c.r)
            return

        g.content = generate_songlist_display()


def download(song):
    """ Download file, show status, return filename. """

    if not os.path.exists(DDIR):
        os.makedirs(DDIR)

    filename = song['singer'][:30] + " - " + song['song'][:30] + ".mp3"
    filename = os.path.join(DDIR, filename)
    print("Downloading %s%s%s ..\n" % (c.g, filename, c.w))
    status_string = ('  {0}{1:,}{2} Bytes [{0}{3:.2%}{2}] received. Rate: '
                     '[{0}{4:4.0f} kbps{2}].  ETA: [{0}{5:.0f} secs{2}]')
    song['track_url'] = get_stream(song)
    logging.debug("[4] fetching url " + song['track_url'])
    resp = urlopen(song['track_url'])
    logging.debug("fetched url " + song['track_url'])
    total = int(resp.info()['Content-Length'].strip())
    chunksize, bytesdone, t0 = 16384, 0, time.time()
    outfh = open(filename, 'wb')

    while True:
        chunk = resp.read(chunksize)
        outfh.write(chunk)
        elapsed = time.time() - t0
        bytesdone += len(chunk)
        rate = (bytesdone / 1024) / elapsed
        eta = (total - bytesdone) / (rate * 1024)
        stats = (c.y, bytesdone, c.w, bytesdone * 1.0 / total, rate, eta)

        if not chunk:
            outfh.close()
            break

        status = status_string.format(*stats)
        sys.stdout.write("\r" + status + ' ' * 4 + "\r")
        sys.stdout.flush()

    return filename


def _bi_range(start, end):
    """
    Inclusive range function, works for reverse ranges.

    eg. 5,2 returns [5,4,3,2] and 2, 4 returns [2,3,4]

    """
    if start == end:
        return start, start

    elif end < start:
        return reversed(range(end, start + 1))

    else:
        return range(start, end + 1)


def _parse_multi(choice):
    """ Given a string such as 1,2,5-1 return [1,2,5,4,3,2,1]. """

    choice = choice.replace(" ", "")
    tracks = choice.split(",")
    alltracks = []

    for x in tracks:

        if "-" in x:
            nrange = x.split("-")
            startend = map(int, nrange)
            alltracks += _bi_range(*startend)

        else:
            alltracks.append(int(x))

    return alltracks


def playlist_manipulate(r, choice):
    """Manipulate a playlist.  Called by playlist_operate."""

    if r['add'].match(choice):
        selection = _parse_multi(choice.strip().lstrip("add").strip())

        for songnum in selection:
            g.active.songs.append(g.model.songs[songnum - 1])

        d = g.active.duration
        g.message = F('added to pl') % (len(selection), g.active.size, d)

    elif r['add_to_pl'].match(choice):
        m = r['add_to_pl'].match(choice)

        if m:
            selection = _parse_multi(m.group(1).strip())
            pl = m.group(2).strip()

            # create playlist if it doesn't exist
            if not g.userpl.get(pl):
                g.userpl[pl] = Playlist(pl)

            # append the songs
            for songnum in selection:
                g.userpl[pl].songs.append(g.model.songs[songnum - 1])
                dur = g.userpl[pl].duration
                f = (len(selection), pl, g.userpl[pl].size, dur)
                g.message = F('added to saved pl') % f
                save_to_file()

    elif r['move'].match(choice):
        m = r['move'].match(choice)
        songs = g.model.songs
        a, b = int(m.group(1)) - 1, int(m.group(2)) - 1
        songs.insert(b, songs.pop(a))
        g.message = F('song move') % (songs[b]['song'], m.group(2))

    elif r['swap'].match(choice):
        m = r['swap'].match(choice)
        songs = g.model.songs
        a, b = int(m.group(1)) - 1, int(m.group(2)) - 1
        songs[a], songs[b] = songs[b], songs[a]
        g.message = F('song sw') % m.groups()

    elif r['remove'].match(choice):
        selection = _parse_multi(choice.strip().lstrip("rm").strip())
        selection = list(reversed(sorted(list(set(selection)))))
        removed = str(tuple(reversed(selection))).replace(",", "")

        for x in selection:
            g.model.songs.pop(x - 1)

        g.message = F('songs rm') % (len(selection), removed)

    else:
        g.message = "%s%s%s was not understood" % (c.r, choice, c.w)


def playlist_operate(choice):
    """ Prompt for user input, return action/value pair. """

    dig = r'\s*\d{1,3}\s*(?:[,-]\s*\d{1,3}\s*){0,30}$'
    r = {}
    r['remove'] = r'\s*rm\s*(%s)' % dig
    r['remove_pl'] = r'\s*rm\s*((?:\w|\ ){0,75})'
    r['add'] = r'\s*add\s*(%s)' % dig
    r['add_to_pl'] = r'\s*add\s*(%s)\s*([\_a-zA-Z](?:\w|\ ){0,35})' % dig[:-1]
    r['addall'] = r'\s*add\s*all\s*'
    #r['addall_to_pl'] = r['addall'] + r'([\_a-zA-Z](?:\w|\ ){0,35})'
    r['rmall'] = r'\s*rm\s*all\s*'
    r['swap'] = r'\s*(?:swap|sw)\s*(\d{1,3})\s*(?:\s+|\,)\s*(\d{1,3})\s*'
    r['move'] = r'\s*(?:move|mv)\s*(\d{1,3})\s*(?:\s+|\,)\s*(\d{1,3})\s*'

    r = {a: re.compile(k, re.IGNORECASE) for a, k in r.items()}

    if r['rmall'].match(choice):
        for n in reversed(range(0, len(g.model.songs))):
            g.model.songs.pop(n)
        g.message = c.b + "Cleared all songs from playlist" + c.w

    elif r['swap'].match(choice) or r['remove'].match(choice) or \
            r['move'].match(choice) or r['add'].match(choice) or \
            r['add_to_pl'].match(choice):

        try:
            playlist_manipulate(r, choice)

        except IndexError:
            g.message = c.r + "Those numbers don't seem to fit!" + c.w

    elif r['addall'].match(choice):
        g.active.songs += g.model.songs
        sizes = g.model.size, g.active.size
        g.message = "%s songs added (%s total)" % (sizes)

    elif r['remove_pl'].match(choice):
        match = r['remove_pl'].match(choice)
        name = match.group(1)

        if g.userpl.get(name):
            del g.userpl[name]
            g.message = "Deleted %s%s%s" % (c.y, name, c.w)
            g.content = playlists_display()
            save_to_file()
            return

        else:
            g.message = F('pl not found advise ls') % name

    else:
        g.message = "%s%s%s was not understood" % (c.r, choice, c.w)
    g.content = generate_songlist_display()


def persist_operate(choice):
    """ Perform load / save of playlists. """

    re_save = re.compile(r'\s*(?:saveas|save)\s*([\_a-zA-Z](?:\w|\ ){,35})')
    re_vopen = re.compile(r'\s*(open|view)\s*(?:((?:\w|\ ){1,35})|\d{1,3})')
    #re_open = re.compile(r'\s*view\s*(?:((?:\w|\ ){1,35})|\d{1,3})')

    if re_vopen.match(choice):
        match = re_vopen.match(choice)
        name = match.group(2)

        # are we trying to open by number?
        try:
            idx = int(match.group(2))
            srt = sorted(g.userpl)
            name = srt[idx - 1]

        except (ValueError, IndexError):
            pass

        saved = g.userpl.get(name)

        if saved and match.group(1) == "open":
            g.model.songs = g.active.songs = list(saved.songs)
            g.message = F("pl loaded") % name

        elif saved and match.group(1) == "view":
            # only view, don't set as active
            g.model.songs = list(saved.songs)
            g.message = F("pl viewed") % name

        else:
            g.message = F("pl not found") % choice[4:].strip()
            g.content = playlists_display()
            return

    elif choice.startswith("open") or choice.startswith("view"):
        #g.message = "Invalid playlist name or id. Select one from above"
        g.message = F("pl not found") % choice[4:].strip()
        g.content = playlists_display()

    elif re_save.match(choice):

        name = re_save.match(choice).group(1)
        name = name.strip()
        g.userpl = g.userpl or {}
        g.userpl[name] = Playlist(name, list(g.model.songs))
        g.message = F('pl saved') % name
        save_to_file()

    elif choice.startswith("save"):
        g.message = F('pl bad name') % choice.lstrip("save").strip()

    elif choice == "ls":

        if not g.userpl:
            g.message = F('no playlists')

        else:
            g.content = playlists_display()
            g.message = F('pl help')
            return

    # show playlist

    elif choice == "vp" and g.active.is_empty:
        txt = F('advise search') if g.model.is_empty else F('advise add')
        g.message = F('pl empty') + " " + txt

    elif choice in ("vp") and not g.active.is_empty:
        g.model.songs = g.active.songs
        g.message = F('current pl')

    g.content = generate_songlist_display()


def play_range(songlist, shuffle=False, repeat=False):
    """ Play a range of songs, exit cleanly on keyboard interrupt. """

    if shuffle:
        random.shuffle(songlist)

    if not repeat:

        for n, song in enumerate(songlist):
            g.content = playback_progress(n, song, songlist, repeat=False)
            screen_update()
            try:
                playsong(song)
            except KeyboardInterrupt:
                g.message = c.y + "Playback halted" + c.w
                break

    elif repeat:
        while True:
            try:
                for n, song in enumerate(songlist):
                    g.content = playback_progress(n, song, songlist,
                                                  repeat=True)
                    screen_update()
                    playsong(song)
                    g.content = generate_songlist_display()

            except KeyboardInterrupt:
                g.message = c.y + "Playback halted" + c.w
                break

    g.content = generate_songlist_display()


def show_help():
    """ Print help message. """

    print("\n" * 200)
    print(HELP)
    print("Press Enter to continue")
    b = compat_input("")
    return b


def action_operate(userinput):
    """ Handle quit and download actions. """

    if userinput in ("q", "quit", "exit"):
        sys.exit(200 * "\n\n" + logo(c.r) + F("exitmsg", 2))

    elif re.match(r'd\s*\d{1,3}', userinput):
        m = re.match(r'd\s*(\d{1,3})', userinput)
        songnum = int(m.group(1)) - 1

        try:
            fname = download(g.model.songs[songnum])

        except IndexError:
            g.message = c.r + "Invalid index" + c.w
            g.content = generate_songlist_display()
            return

        g.message = "Downloaded " + c.g + fname + c.w

    elif userinput in ("h", "help"):
        show_help()

    else:
        g.message = "%s%s%s was not understood" % (c.r, userinput, c.w)

    g.content = generate_songlist_display()


def play_operate(userinput):
    """ Receive user input specifying a range or all to play. """

    shuffle = repeat = False

    if "shuffle" in userinput:
        shuffle = True
        userinput = userinput.replace("shuffle", "").strip()

    if "repeat" in userinput:
        repeat = True
        userinput = userinput.replace("repeat", "").strip()

    if not g.model.songs:
        g.message = c.r + "There are no tracks to select" + c.w

    else:
        digits = re.compile(r'\s*\d{1,3}\s*(?:[,-]\s*\d{1,3}\s*){0,30}$')

        if digits.match(userinput):
            selection = _parse_multi(userinput)

            try:
                songs = [g.model.songs[x - 1] for x in selection]

            except IndexError:
                g.message = c.r + "Invalid range!" + c.w
                g.content = generate_songlist_display()
                return

            play_range(songs, shuffle=shuffle, repeat=repeat)

        elif userinput in ("all", "playall"):
            play_range(g.model.songs, shuffle=shuffle, repeat=repeat)

        else:
            g.content = generate_songlist_display()
            g.message = c.r + "Bad syntax" + c.w
            print(userinput)


def prompt_for_exit():
    """ Ask for exit confirmation. """

    g.message = c.r + "Press ctrl-c again to exit" + c.w
    g.content = generate_songlist_display()
    screen_update()

    try:
        userinput = compat_input(c.r + " > " + c.w)

    except KeyboardInterrupt:
        sys.exit(F("exitmsg", 2))

    return userinput


def main():
    """ Main control loop. """

    # open playlists if they exist
    open_from_file()

    inp = " ".join(sys.argv[1:])

    playlist_operations = ("rm", "mv", "sw", "add")
    play_operations = tuple([str(x) for x in range(10)] + ["all", "shuffle",
                                                           "repeat"])
    action_operations = ("d", "q", "exit", "h", "help")
    persist_operations = ("open", "save", "ls", "vp", "view")
    top_operations = "top top3m top6m topyear topall".split()
    prompt = "Enter .artist/song name to search or [h]elp > %s" % (c.y)
    g.content = generate_songlist_display()
    g.message = "Welcome!"
    screen_update()

    while True:

        try:
            userinput = inp or compat_input(prompt)
            print(c.w)

        except KeyboardInterrupt:
            userinput = prompt_for_exit()

        inp = None

        if userinput.startswith(playlist_operations):
            playlist_operate(userinput)

        elif userinput.startswith(play_operations):
            play_operate(userinput)

        elif userinput.startswith(action_operations):
            action_operate(userinput)

        elif userinput.startswith(persist_operations):
            persist_operate(userinput)

        elif userinput in top_operations:
            get_top_period(top_operations.index(userinput) + 1)

        elif userinput.startswith("."):
            dosearch(userinput.lstrip("."))

        else:
            g.message = F('use dot')
            g.content = generate_songlist_display()

        screen_update()

if __name__ == "__main__":
    main()
